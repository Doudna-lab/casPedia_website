# Native modules
import pandas as pd
import re
import os


# Define a function to generate HTML links
def generate_link(row, linked_column, app_function):
    """Generates an HTML href pointer to a template associated with the search result"""
    link = f"<a href='{{{{ url_for('{app_function}', page=\'{row[linked_column]}.html\') }}}}'>{row[linked_column]}</a>"
    return link


def try_numeric_conversion(value):
    # Function to attempt numeric conversion of dataframe columns
    try:
        return pd.to_numeric(value)
    except (ValueError, TypeError):
        return value  # Return the original value if conversion fails


def last_df_col_to_first(df):
    """Brings a pandas dataframe last column to the first position"""
    # Get the column names and pop the last column
    columns = df.columns.tolist()
    last_column = columns.pop()
    # Reorder the column names and insert the last column at the beginning
    new_columns = [last_column] + columns
    # Reindex the DataFrame with the new column order
    df_out = df.reindex(columns=new_columns)

    return df_out


# def replace_func(match):
#     """Adds a "class='num'" tag to integers or floats in a string replacement operation"""
#     group1 = match.group(1)
#     numeric_type_bool = True
#     try:
#         int(group1)
#     except ValueError:
#         try:
#             float(group1)
#         except ValueError:
#             return group1  # No replacement, return the original match
#     if numeric_type_bool:
#         return f"<td class=\"num\">{group1}</td>\n"


def replace_func(match):
    """Adds a "class='num'" tag to integers or floats in a string replacement operation"""
    group1 = match.group(1)

    try:
        # Try to convert to an integer
        int_value = int(group1)
        return f"<td class=\"num\">{int_value}</td>\n"
    except ValueError:
        try:
            # Try to convert to a float
            float_value = float(group1)
            return f"<td class=\"num\">{float_value}</td>\n"
        except ValueError:
            return f"<td>{group1}</td>\n"  # No replacement, return the original match


# Define a function to add classes to specific headers
def add_classes_to_headers(blastout_df_html, target_cols, column_class):
    lines = blastout_df_html.split('\n')
    for col in target_cols:
        header_line = f'<th>{col}</th>'
        header_found = next((re.search(header_line, item) for item in lines if re.search(header_line, item)), None)
        if header_found:
            index = lines.index(header_found.string)
            lines[index] = f'<th class="{column_class}">{col}</th>'
    return '\n'.join(lines)


def dynamic_blastout_html(blastout_df_html, html_template_path, message_to_user):
    """
    Dynamic generation of search results page. Takes a html-converted pandas dataframe
        and inserts the dataframe into a pre-edited HTML template.
        blastout_df_html -- dataframe generated by pandas through 'to_html' method
        html_template_path -- path to pre-edited HTML template
        message_to_user -- sequence identifier of the blastP query
    """
    # Read the template file
    with open(html_template_path, 'r') as f:
        template = f.read()

    # Replace the placeholder with the table HTML
    template = re.sub(r'<div id="table">.*?</div>', blastout_df_html, template)
    # Header adjustments
    template = template.replace('<table border="1" class="dataframe">',
                                f"<div class='table-wrap'>\n<table class='sortable'>\n"
                                f"<caption>\n{message_to_user}"
                                f"\n<span class='sr-only'>\n</span></caption>")
    template = template.replace('</table>', '</table>\n</div>')
    template = template.replace('<thead>', '<thead id="thead">')
    template = template.replace('<tbody>', '<tbody id="tbody">')

    # Adjust table headers to include buttons
    template = re.sub(r"<th(.*?)>(.*?)<\/?th>\n",
                      r"<th\1>\n\t<button>\n\t\t\2\n"
                      r"\t\t<span aria-hidden='true'></span>\n"
                      r"\t\t</button>\n\t</th>\n", template)

    # Assign class='num' to numeric cells of the HTML table
    template = re.sub(r"<td>(.*?)<\/?td\n>", replace_func, template)

    return template


# DEBUG INPUTS
# import yaml
# with open("config_render/render_result.yaml", "r") as f:
#     config_render = yaml.load(f, Loader=yaml.FullLoader)
def run(blastout_dict, config_render):
    # Grab input sequence ID
    message_to_user = f"{config_render['sequence_search_message']} {list(blastout_dict.keys())[0]}"
    # Import blastout parsed dictionary into pandas dataframe
    df = pd.DataFrame.from_dict(blastout_dict[list(blastout_dict.keys())[0]], orient='index')

    # Create a column for hit IDs
    df[config_render["linked_column_sequence_search"]] = df.index
    # Reorder the dataframe so the hit IDs are placed first
    df = last_df_col_to_first(df)
    # Apply the function to links to the hit ID columns
    df[config_render["linked_column_sequence_search"]] = df.apply(lambda row: generate_link(
        row, config_render["linked_column_sequence_search"], 'wiki_page'), axis=1)

    # Loop through columns and attempt to convert to numeric datatype
    for col in df.columns:
        df[col] = df[col].apply(try_numeric_conversion)

    # Convert the DataFrame to HTML table
    df_blastout_html = df.to_html(escape=False, index=False)

    # Add HTML class "num" to table headers.
    #   The set of columns to be labelled as numeric is defined in the render_result.yaml config file
    blastout_html_class = add_classes_to_headers(df_blastout_html,
                                                          config_render["numeric_columns_blast"],
                                                          "num")

    # Create and save a modified template to a new file
    blastout_html_template_class = dynamic_blastout_html(blastout_html_class,
                                                   config_render["search_template_path"],
                                                   message_to_user)

    return blastout_html_template_class
